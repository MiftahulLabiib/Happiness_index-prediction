knitr::opts_chunk$set(echo = TRUE)
#Import library
library(dplyr)
library(ggplot2)
library(lubridate)
#read data
happiness <- read.csv("2019.csv")
head(happiness)
#Check datatypes
glimpse(happiness)
#Select data
happiness_data <- happiness %>%
select(-Overall.rank, -Country.or.region)
head(happiness_data)
#Check if there is NULL columns
colSums(is.na(happiness_data))
#Check data distrbution
boxplot(happiness_data)
library(GGally)
ggcorr(happiness_data, label = T, label_size = 2.9, hjust = 1, layout.exp = 2)
#Building model with all predictor variable
happiness_all <- lm(formula = Score ~.,
data = happiness_data)
summary(happiness_all)
set.seed(123)
#splitting data
index <- sample(x = nrow(happiness_data),
size = nrow(happiness_data)*0.8)
happiness_train <- happiness_data[index, ]
happiness_test <- happiness_data[-index, ]
#Building model with all predictor variable
happiness_all <- lm(formula = Score ~.,
data = happiness_train)
summary(happiness_all)
#Building model with Predictors based on correlation
happiness_selection <- lm(formula = Score ~ GDP.per.capita + Social.support + Healthy.life.expectancy + Freedom.to.make.life.choices,
data = happiness_train)
summary(happiness_selection)
happiness_backward <- step(object = happiness_all,
direction = "backward")
summary(happiness_backward)
#Building model with no target
no_target <- lm(formula = Score ~ 1,
data = happiness_train)
#Building forward model
happiness_forward <- step(object = no_target,
direction = "forward",
scope = list(upper= happiness_all),
trace = 1)
summary(happiness_forward)
happiness_both <- step(object = no_target,
direction = "both",
scope = list(upper = happiness_all),
trace = 1)
summary(happiness_both)
summary(happiness_all)$adj.r.squared
summary(happiness_selection)$adj.r.squared
summary(happiness_backward)$adj.r.squared
summary(happiness_forward)$adj.r.squared
summary(happiness_both)$adj.r.squared
happiness_data$predict_all <- predict(object = happiness_all, newdata = happiness_data)
happiness_data$predict_selection <- predict(object = happiness_selection, newdata = happiness_data)
happiness_data$predict_backward <- predict(object = happiness_backward, newdata = happiness_data)
happiness_data$predict_forward <- predict(object = happiness_forward, newdata = happiness_data)
happiness_data$predict_both <- predict(object = happiness_both, newdata = happiness_data)
head(happiness_data)
library(performance)
comparison <- compare_performance(happiness_all, happiness_selection, happiness_backward, happiness_forward, happiness_both)
as.data.frame(comparison)
happiness_data$predict_all <- predict(object = happiness_all, newdata = happiness_data)
happiness_data$predict_selection <- predict(object = happiness_selection, newdata = happiness_data)
happiness_data$predict_backward <- predict(object = happiness_backward, newdata = happiness_data)
happiness_data$predict_forward <- predict(object = happiness_forward, newdata = happiness_data)
happiness_data$predict_both <- predict(object = happiness_both, newdata = happiness_data)
head(happiness_data)
plot(happiness_backward, which = 1)
hist(happiness_backward$residuals)
shapiro.test(happiness_backward$residuals)
plot(happiness_backward, which = 2)
plot(x = happiness_backward$fitted.values,
y = happiness_backward$residuals)
abline(h = 0, col = "red")
library(lmtest)
bptest(happiness_backward)
library(lmtest)
bptest(happiness_backward)
library(car)
vif(happiness_backward)
library(lmtest)
bptest(happiness_all)
plot(happiness_all, which = 1)
plot(happiness_all, which = 1)
hist(happiness_all$residuals)
shapiro.test(happiness_all$residuals)
shapiro.test(happiness_all$residuals)
plot(happiness_all, which = 2)
plot(happiness_all, which = 2)
plot(x = happiness_all$fitted.values,
y = happiness_all$residuals)
abline(h = 0, col = "red")
library(lmtest)
bptest(happiness_all)
#library(car)
vif(happiness_all)
happiness_train$predict_all <- predict(object = happiness_all, newdata = happiness_train)
happiness_train$predict_selection <- predict(object = happiness_selection, newdata = happiness_train)
happiness_train$predict_backward <- predict(object = happiness_backward, newdata = happiness_train)
happiness_train$predict_forward <- predict(object = happiness_forward, newdata = happiness_train)
happiness_train$predict_both <- predict(object = happiness_both, newdata = happiness_train)
head(happiness_train)
happiness_all_predict <- predict(happiness_all, newdata = happiness_test %>% select(-Score))
#RMSE for test data
rmse(pred = happiness_all$fitted.values, obs = happiness_test$Score)
happiness_all_predict <- predict(happiness_all, newdata = happiness_test %>% select(-Score))
#RMSE for test data
rmse(happiness_all$fitted.values, happiness_test$Score)
library(caret)
happiness_all_predict <- predict(happiness_all, newdata = happiness_test %>% select(-Score))
#RMSE for test data
rmse(happiness_all$fitted.values, happiness_test$Score)
library(MLmetrics)
happiness_all_predict <- predict(happiness_all, newdata = happiness_test %>% select(-Score))
#RMSE for test data
rmse(happiness_all$fitted.values, happiness_test$Score)
library(MLmetrics)
happiness_all_predict <- predict(happiness_all, newdata = happiness_test %>% select(-Score))
#RMSE for test data
rmse(happiness_all_predict, happiness_test$Score)
library(MLmetrics)
happiness_test$predict_score <- predict(object = happiness_all, newdata = happiness_test)
#RMSE
RMSE(y_pred = happiness_test$predict_score,
y_true = happiness_test$Score)
happiness_train$predict_all <- predict(object = happiness_all, newdata = happiness_train)
happiness_train$predict_selection <- predict(object = happiness_selection, newdata = happiness_train)
happiness_train$predict_backward <- predict(object = happiness_backward, newdata = happiness_train)
happiness_train$predict_forward <- predict(object = happiness_forward, newdata = happiness_train)
happiness_train$predict_both <- predict(object = happiness_both, newdata = happiness_train)
head(happiness_train)
```{r}
happiness_train$predict_all <- predict(object = happiness_all, newdata = happiness_train)
happiness_train$predict_selection <- predict(object = happiness_selection, newdata = happiness_train)
happiness_train$predict_backward <- predict(object = happiness_backward, newdata = happiness_train)
happiness_train$predict_forward <- predict(object = happiness_forward, newdata = happiness_train)
happiness_train$predict_both <- predict(object = happiness_both, newdata = happiness_train)
head(happiness_train)
```{r}
happiness_train$predict_all <- predict(object = happiness_all, newdata = happiness_train)
happiness_train$predict_selection <- predict(object = happiness_selection, newdata = happiness_train)
happiness_train$predict_backward <- predict(object = happiness_backward, newdata = happiness_train)
happiness_train$predict_forward <- predict(object = happiness_forward, newdata = happiness_train)
happiness_train$predict_both <- predict(object = happiness_both, newdata = happiness_train)
head(happiness_train)
happiness_train$predict_all <- predict(object = happiness_all, newdata = happiness_train)
happiness_train$predict_selection <- predict(object = happiness_selection, newdata = happiness_train)
happiness_train$predict_backward <- predict(object = happiness_backward, newdata = happiness_train)
happiness_train$predict_all <- predict(object = happiness_all, newdata = happiness_train)
happiness_train$predict_selection <- predict(object = happiness_selection, newdata = happiness_train)
happiness_train$predict_backward <- predict(object = happiness_backward, newdata = happiness_train)
head(happiness_train)
happiness_train$predict_all <- predict(object = happiness_all, newdata = happiness_train)
happiness_train$predict_selection <- predict(object = happiness_selection, newdata = happiness_train)
happiness_train$predict_backward <- predict(object = happiness_backward, newdata = happiness_train)
head(happiness_train)
#RMSE for happiness_all
RMSE(y_pred = happiness_train$predict_all,
y_true = happiness_train$Score)
#RMSE FOR happiness_selection
RMSE(y_pred = happiness_train$predict_selection,
y_true = happiness_train$Score)
#RMSE for Happiness_backward
RMSE(y_pred = happiness_train$predict_backward,
y_true = happiness_train$Score)
summary(happiness_all)
#Import library
library(dplyr)
library(ggplot2)
library(lubridate)
library(MLmetrics)
library(GGally)
ggcorr(happiness_data, label = T, label_size = 2.9, hjust = 1, layout.exp = 2)
knitr::opts_chunk$set(echo = TRUE)
#Import library
library(dplyr)
library(ggplot2)
library(lubridate)
library(MLmetrics)
#read data
happiness <- read.csv("2019.csv")
head(happiness)
#Check datatypes
glimpse(happiness)
#Select data
happiness_data <- happiness %>%
select(-Overall.rank, -Country.or.region)
head(happiness_data)
#Check if there is NULL columns
colSums(is.na(happiness_data))
#Check data distrbution
boxplot(happiness_data)
library(GGally)
ggcorr(happiness_data, label = T, label_size = 2.9, hjust = 1, layout.exp = 2)
set.seed(123)
#splitting data
index <- sample(x = nrow(happiness_data),
size = nrow(happiness_data)*0.8)
happiness_train <- happiness_data[index, ]
happiness_test <- happiness_data[-index, ]
#Building model with all predictor variable
happiness_all <- lm(formula = Score ~.,
data = happiness_train)
summary(happiness_all)
#Building model with Predictors based on correlation
happiness_selection <- lm(formula = Score ~ GDP.per.capita + Social.support + Healthy.life.expectancy + Freedom.to.make.life.choices,
data = happiness_train)
summary(happiness_selection)
happiness_backward <- step(object = happiness_all,
direction = "backward")
summary(happiness_backward)
#Building model with no target
no_target <- lm(formula = Score ~ 1,
data = happiness_train)
#Building forward model
happiness_forward <- step(object = no_target,
direction = "forward",
scope = list(upper= happiness_all),
trace = 1)
summary(happiness_forward)
happiness_both <- step(object = no_target,
direction = "both",
scope = list(upper = happiness_all),
trace = 1)
summary(happiness_both)
summary(happiness_all)$adj.r.squared
summary(happiness_selection)$adj.r.squared
summary(happiness_backward)$adj.r.squared
summary(happiness_forward)$adj.r.squared
summary(happiness_both)$adj.r.squared
happiness_train$predict_all <- predict(object = happiness_all, newdata = happiness_train)
happiness_train$predict_selection <- predict(object = happiness_selection, newdata = happiness_train)
happiness_train$predict_backward <- predict(object = happiness_backward, newdata = happiness_train)
head(happiness_train)
#RMSE for happiness_all
RMSE(y_pred = happiness_train$predict_all,
y_true = happiness_train$Score)
#RMSE FOR happiness_selection
RMSE(y_pred = happiness_train$predict_selection,
y_true = happiness_train$Score)
#RMSE for Happiness_backward
RMSE(y_pred = happiness_train$predict_backward,
y_true = happiness_train$Score)
happiness_test$predict_score <- predict(object = happiness_all, newdata = happiness_test)
#RMSE
RMSE(y_pred = happiness_test$predict_score,
y_true = happiness_test$Score)
summary(happiness_all)
plot(happiness_all, which = 1)
hist(happiness_all$residuals)
shapiro.test(happiness_all$residuals)
plot(happiness_all, which = 2)
plot(x = happiness_all$fitted.values,
y = happiness_all$residuals)
abline(h = 0, col = "red")
library(lmtest)
bptest(happiness_all)
library(car)
vif(happiness_all)
summary(happiness_all)$adj.r.squared
summary(happiness_selection)$adj.r.squared
summary(happiness_backward)$adj.r.squared
plot(happiness_all, which = 1)
hist(happiness_all$residuals)
shapiro.test(happiness_all$residuals)
plot(happiness_all, which = 2)
plot(x = happiness_all$fitted.values,
y = happiness_all$residuals)
abline(h = 0, col = "red")
library(lmtest)
bptest(happiness_all)
library(car)
vif(happiness_all)
